<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Folder" referent="RBX784d273ff18a41f98f5cb3a2cf22bc85">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
			<bool name="DefinesCapabilities">false</bool>
			<string name="Name">LLVM</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="Script" referent="RBXa307aba80e0941d7a7942e9aec15296b">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Enviroment</string>
				<token name="RunContext">0</token>
				<string name="ScriptGuid">{43d9f3b9-4baa-495d-b3e2-688544b198a0}</string>
				<ProtectedString name="Source"><![CDATA[-- Environment.lua

local Environment = {}
Environment.__index = Environment

function Environment.new(parent)
	local self = setmetatable({}, Environment)
	self.variables = {}
	self.parent = parent  -- Reference to parent environment for nested scopes
	return self
end

function Environment:set(varName, value)
	self.variables[varName] = value
end

function Environment:get(varName)
	if self.variables[varName] ~= nil then
		return self.variables[varName]
	elseif self.parent then
		return self.parent:get(varName)
	end
	error("Variable " .. varName .. " is not defined.")
end

return Environment]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX828b6bfc3f80435fb0450a3c10a31ae5">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Evaluator</string>
				<token name="RunContext">0</token>
				<string name="ScriptGuid">{54ef5331-0fbe-471c-b54a-31b242d49952}</string>
				<ProtectedString name="Source"><![CDATA[-- Evaluator.lua

local Evaluator = {}
Evaluator.__index = Evaluator

function Evaluator.new(environment)
	local self = setmetatable({}, Evaluator)
	self.environment = environment
	return self
end

function Evaluator:eval(value)
	local num = tonumber(value)
	if num then return num end

	-- Variable lookup
	if self.environment:get(value) then
		return self.environment:get(value)
	end

	-- Arithmetic expressions
	local exprPattern = "(.+)%s*([%+%-%*/])%s*(.+)"
	local left, op, right = value:match(exprPattern)
	if left and op and right then
		left = self:eval(left)
		right = self:eval(right)
		if op == "+" then return left + right
		elseif op == "-" then return left - right
		elseif op == "*" then return left * right
		elseif op == "/" then return left / right end
	end

	return value  -- Fallback
end

function Evaluator:executeBlock(statements)
	for _, statement in ipairs(statements) do
		self:execute(statement)
	end
end

function Evaluator:execute(statement)
	-- Handle console.log
	if statement.type == "ConsoleLog" then
		print(self:eval(statement.value))
	elseif statement.type == "VariableDeclaration" then
		self.environment:set(statement.name, self:eval(statement.value))
	elseif statement.type == "FunctionDeclaration" then
		self.environment:set(statement.name, statement)  -- Store function
	elseif statement.type == "FunctionCall" then
		local func = self.environment:get(statement.name)
		if func then
			local args = {}
			for _, arg in ipairs(statement.args) do
				table.insert(args, self:eval(arg))
			end
			self:callFunction(func, args)
		end
	elseif statement.type == "IfStatement" then
		if self:eval(statement.condition) then
			self:executeBlock(statement.consequent)
		end
	elseif statement.type == "ForStatement" then
		local init = statement.init
		self.environment:set(init.var, self:eval(init.value))
		while self:eval(statement.condition) do
			self:executeBlock(statement.body)
			self.environment:set(init.var, self:eval(init.var) + 1)
		end
	elseif statement.type == "ReturnStatement" then
		return self:eval(statement.value)
	end
end

function Evaluator:callFunction(func, args)
	local localEnv = Environment.new(self.environment)
	for i, param in ipairs(func.params) do
		localEnv:set(param, args[i])
	end
	local oldEnv = self.environment
	self.environment = localEnv
	self:executeBlock(func.body)
	self.environment = oldEnv
end

return Evaluator]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX7e0e05c57c9941f8b30789aa5ac6023f">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Parser</string>
				<token name="RunContext">0</token>
				<string name="ScriptGuid">{eec45009-05ac-42b3-be7a-26c43f4dbecb}</string>
				<ProtectedString name="Source"><![CDATA[-- Parser.lua

local Parser = {}
Parser.__index = Parser

function Parser.new()
	local self = setmetatable({}, Parser)
	return self
end

function Parser:parse(code)
	local statements = {}
	for line in code:gmatch("[^\r\n]+") do
		local trimmedLine = line:gsub("^%s*(.-)%s*$", "%1")  -- Trim whitespace
		if trimmedLine ~= "" then
			local statement = self:parseLine(trimmedLine)
			if statement then
				table.insert(statements, statement)
			end
		end
	end
	return statements
end

function Parser:parseLine(line)
	-- Variable declaration
	local varPattern = "^(let|const|var)%s+(%w+)%s*=%s*(.+);?$"
	local varType, varName, value = line:match(varPattern)
	if varName then
		return { type = "VariableDeclaration", name = varName, value = value }
	end

	-- Function declaration
	local funcPattern = "^function%s+(%w+)%s*%((.-)%)%s*{"
	local funcName, params = line:match(funcPattern)
	if funcName then
		return { type = "FunctionDeclaration", name = funcName, params = self:splitParams(params), body = {} }
	end

	-- Function call
	local callPattern = "^(%w+)%s*%((.-)%);?$"
	local funcCallName, funcCallArgs = line:match(callPattern)
	if funcCallName then
		return { type = "FunctionCall", name = funcCallName, args = self:splitArgs(funcCallArgs) }
	end

	-- Console.log
	local logPattern = "^console%.log%((.+)%);?$"
	local logValue = line:match(logPattern)
	if logValue then
		return { type = "ConsoleLog", value = logValue }
	end

	-- If statement
	local ifPattern = "^if%((.+)%)%s*{"
	local condition = line:match(ifPattern)
	if condition then
		return { type = "IfStatement", condition = condition, consequent = {} }
	end

	-- For loop
	local forPattern = "^for%s*%((%w+)%s*=%s*(%d+);%s*(%w+)%s*<%s*(%d+);%s*%w+%+%+)%.%s*{"
	local loopVar, start, loopVarName, endValue = line:match(forPattern)
	if loopVar then
		return { type = "ForStatement", init = { var = loopVar, value = start }, condition = loopVarName .. " < " .. endValue, body = {} }
	end

	return nil
end

function Parser:splitParams(paramString)
	local params = {}
	for param in paramString:gmatch("%w+") do
		table.insert(params, param)
	end
	return params
end

function Parser:splitArgs(argString)
	local args = {}
	for arg in argString:gmatch("[^,]+") do
		table.insert(args, arg)
	end
	return args
end

return Parser]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="PackageLink" referent="RBX09546acaa59d4449ab05c924318f6cea">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoUpdate">false</bool>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<string name="DefaultName"></string>
				<bool name="DefinesCapabilities">false</bool>
				<int name="ModifiedState">1</int>
				<string name="Name">PackageLink</string>
				<Content name="PackageIdSerialize"><url>rbxassetid://131524580145104</url></Content>
				<BinaryString name="SerializedDefaultAttributes"></BinaryString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<int64 name="VersionIdSerialize">1</int64>
			</Properties>
		</Item>
	</Item>
</roblox>